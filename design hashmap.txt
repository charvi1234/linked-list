/* https://leetcode.com/problems/design-hashmap/ */

class MyHashMap {
    class ListNode{
        int key;
        int value;
        ListNode next;
        public ListNode(int key, int value)
        {
            this.key = key;
            this.value = value;
        }
    }

    /** Initialize your data structure here. */
    ListNode nodes[] = new ListNode[10000];
    public MyHashMap() {
        // ListNode nodes[] = new ListNode[10000];
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        int index = HashCode(key);
        if(nodes[index] == null)
            nodes[index] = new ListNode(-1,-1);
        ListNode prev = find(nodes[index], key);
        if(prev.next == null)
        {
            prev.next = new ListNode(key,value);
        }
        else
        {
            prev.next.value = value;
        }
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int index = HashCode(key);
        if(nodes[index] == null)
            return -1;
        ListNode prev = find(nodes[index], key);
        if(prev.next != null)
            return prev.next.value;
        else
            return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int index = HashCode(key);
        if(nodes[index] == null)
            return;
        ListNode prev = find(nodes[index], key);
        if(prev.next == null)
        {
            return;
        }
        prev.next = prev.next.next;
    }
    public ListNode find(ListNode bucket, int key)
    {
        ListNode node = bucket;
        ListNode prev = null;
        while(node != null && node.key != key)
        {
            prev = node;
            node = node.next;
        }
        return prev;
    }
    public int HashCode(int key)
    {
        int hash = Integer.hashCode(key);
        int index = hash%nodes.length;
        return index;
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */